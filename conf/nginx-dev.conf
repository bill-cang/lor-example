pid pid/nginx.pid;

#启动进程，通常与ＣＰＵ核数相同
worker_processes 4;

#全局日志
error_log logs/dev-error.log;

#工作模式以及链接上线
events {
    #epoll是多路复用IO(I/O Multiplexing)中的一种方式,但是仅用于linux2.6以上内核,可以大大提高nginx的性能
    use   epoll;
    #最大并发连接数
    worker_connections 4096;
}
#设定http服务器，利用它的反向代理功能提供负载均衡支持
http {
    sendfile on;
    include ./mime.types;

    # lor initialization
    lua_package_path "./app/?.lua;./?.lua;/usr/local/lor/?.lua;;";

    server {
        #设置监听端口
        listen 9999;
        set $template_root '';

        #设置日志输出
        access_log logs/dev-access.log;

        lua_code_cache on;


        #测试nginx启动是否正常
        location /index {
            echo "welcome to lua lor-example!!!";
        }

        #测试luajit编译是否正常
        location /say {
            content_by_lua '
                ngx.say("this is lor first lua say!!!")
            ';
        }

        #测试lua_package_path 设置是否正确
        location /say2 {
            content_by_lua_file app/welcome.lua;
        }


        location /logtest {
             content_by_lua_block {
                 local num = 55
                 local str = "string"
                 local obj
                 ngx.log(ngx.ERR, "num:", num)
                 ngx.log(ngx.INFO, " string:", str)
                 print([[i am print]])
                 ngx.log(ngx.ERR, " object:", obj)
             }
        }



        location /static {
             #app/static;
             alias ./app/static;
        }

        location / {
            content_by_lua_file ./app/main.lua;
        }
    }



    server {
        listen 8080;

        set $template_root '';


        lua_code_cache off;


        location /static {
             #app/static;
             alias ./app/static;
        }

        location / {
            content_by_lua_file ./app/main.lua;
        }
    }

}
